import sqlite3

import telebot
import time
import logging

from config import TOKEN
from telebot import types
from db import *

bot = telebot.TeleBot(TOKEN)

logging.basicConfig(level=logging.INFO)

user_data = {}

def set_user_state(user_id, role, state):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO user_states (user_id, role, state)
                              VALUES (?, ?, ?)''', (user_id, role, state))
            conn.commit()

    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")


def get_user_state(user_id):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT state FROM user_states WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            if row:
                return row[0]
            else:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    except sqlite3.DatabaseError as e:
        logging.error(f"Database error: {e}")
        return None

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        race_btn = types.KeyboardButton(text='üèÅ –ì–æ–Ω–∫–∏ –Ω–∞ Cherry üèÅ')

        markup.add(race_btn)

        bot.send_message(user_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≥–æ!')
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª, –®—É–º–∞—Ö–µ—Ä', reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f"Error in Start: {e}")


@bot.message_handler(func=lambda message: message.text == 'üèÅ –ì–æ–Ω–∫–∏ –Ω–∞ Cherry üèÅ')
def race_reg(message):
    user_id = message.chat.id
    try:
        state = get_user_state(user_id)
        if state == 'registered':
            bot.send_message(user_id, "–í—ã —É–∂–µ –±—Ä–æ—Å–∏–ª–∏ —Å–≤–æ–π –≤—ã–∑–æ–≤!")

        elif state != 'registered':
            msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Nick_Name: \n')
            bot.register_next_step_handler(msg, user_name)

    except Exception as e:
        bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')

def user_name(message):
    user_id = message.chat.id
    try:
        if user_id not in user_data:
            user_data[user_id] = {}
        name = message.text
        user_data[user_id] = {'id': user_id, 'name': name, 'last_name': message.chat.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
        msg = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä:\n')
        bot.register_next_step_handler(msg, user_server)
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO races_reg (id, name, last_name)
                              VALUES (?, ?, ?)''', (
            user_id, name, message.chat.username
            ))
            conn.commit()
    except Exception as e:
        bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')


def user_server(message):
    user_id = message.chat.id
    try:
        if user_id not in user_data:
            user_data[user_id] = {}
        server = message.text
        user_data[user_id] = {'server': server}
        msg = bot.send_message(user_id, '–ö–∞–∫–∞—è —É –≤–∞—Å –º–∞—à–∏–Ω–∞:\n')
        bot.register_next_step_handler(msg, user_car)
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO races_reg (server)
                              VALUES (?)''',  (
            server,
            ))
            conn.commit()


    except Exception as e:
        bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')


def user_car(message):
    user_id = message.chat.id
    try:
        car = message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user_data[user_id], –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if user_id not in user_data:
            user_data[user_id] = {}

        user_data[user_id]['car'] = car

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''INSERT OR REPLACE INTO races_reg (car)
                              VALUES (?)''', (
                car,
            ))
            conn.commit()
            bot.send_message(user_id, '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
            bot.send_message(user_id, '–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å –≤—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–º–µ—Ç—Å—è, —Ç–æ –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω!')
            set_user_state(user_id, 'racing', 'registered')

    except Exception as e:
        logging.error(f"Error in user_car: {e}")
        bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')

@bot.message_handler(commands=['show'])
def view_all_races_reg(message):
    chat_id = message.chat.id
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect('example.db') as conn:
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑—ã
        cursor.execute("SELECT * FROM races_reg WHERE id = ?", (chat_id,))
        rows = cursor.fetchall()
        if rows:
            response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            for row in rows:
                response += f"ID: {row[0]},\n Name: {row[1]},\n User_Name: {row[2]},\n –°–µ—Ä–≤–µ—Ä: {row[3]}\n –ú–∞—à–∏–Ω–∞: {row[4]}\n"
            bot.send_message(chat_id, response)
        else:
            bot.send_message(chat_id, "–ù–µ—Ç—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π.")


if __name__ == "__main__":
    create_tables()
    create_states()
    while True:
        try:
            logging.info("Starting bot polling")
            bot.polling(none_stop=True, timeout=60, interval=0)
        except Exception as e:
            logging.error(f"Error occurred: {e}")
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(15)
